Πετρίδου Άννα 1115201600135

Εργασία 2

Για τη μεταγλώττιση και την εκτέλεση χρησιμοποιώ το Makefile που έχω φτιάξει, οπότε αρκεί για τη μεταγλώττιση η εντολή:
 
make

και για την εκτέλεση:

./diseaseAggregator -i input_dir -w 3 -b 4096
(βεβαια μπορει να τα δεχτει με οποιαδηποτε σειρα τα ορισματα)

Για το bash script χρησιμοποίησα τη $RANDOM για την παραγωγή των τυχαίων δεδομένων. Επίσης, ελέγχω αν δίνεται σωστό πλήθος ορισμάτων και αν τα νούμερα είναι θετικά.Τα ids ειναι μοναδικά και είναι της μορφής rX,όπου Χ o μοναδικός αριθμός τους καθώς δημιουργούνται.

ενδεικτική εκτέλεση του bash script:
$ bash create_infiles.sh /home/users/sdi1600135/AnnaPetridou_project2/countries.txt /home/users/sdi1600135/AnnaPetridou_project2/diseases.txt inputdir 5 4


Για την υλοποίηση μου:

Χρησιμοποίησα 2 named pipes για κάθε worker, ενα send και ενα receive, συνεπως ειναι workers x 2 τα pipes μου. Για το open χρησιμοποιώ:
open(pipe_name_send, O_WRONLY)
open(pipe_name_receive, O_RDONLY)

όπως προτείνεται στην εκφώνηση.

Για να αποφευχθεί το "μπλοκάρισμα" και η αναμονή ενός αργού worker, ενώ υπάρχει αλλος έτοιμος να στείλει δεδομένα, έχω υλοποιήσει select, την οποία χρησιμοποιώ σε όλα τα σημεία που χρειαστηκε επικοινωνία με όλους του workers. 

Αν ληφθεί σήμα SIGINT η SIGQUIT, oι workers θα λάβουν SIGKILL και θα δημιουργηθεί log_file.xxx, όπως περιγράφεται στην εκφώνηση.
Όμοια και για το parent process, oταν γίνει έξοδος από την εφαρμογή,δημιουργείται το log_file.xxx ,όπως ακριβώς περιγράφεται στην εκφώνηση. Ως total, success και fail, όρισα εγώ συμβατικά κάποιες καταστάσεις επιτυχίας(όταν εκτελούνται οι εντολές κανονικά) ή αποτυχίας(όταν για παράδειγμα δίνεται λάθος εντολή ή λαθος ορίσματα).
 
Επίσης υλοποίησα την περίπτωση τοy SIGUSR1.

Για την υλοποίηση της άσκησης χρησιμοποίησα πολλές από τις δομές της παλιάς εργασίας καθώς και κάποιες νέες, όπως πχ λίστα για dates(την οποία κανω sort), λίστα για countries κλπ. 



